/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import hr.algebra.model.Person;
import hr.algebra.model.PersonAddable;
import hr.algebra.model.PersonTransferable;
import hr.algebra.model.StringAddable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author Leon Kranjcevic
 */
public class AddActor extends javax.swing.JFrame implements PersonAddable {

    private static final String DELIMITER = ",";
    private static final String SPACE = " ";

    //private StringAddable stringAddable;
    private boolean actorsChanged;

    private EditMoviePanel panelEdit;

    private List<Person> persons = new ArrayList<Person>();
    List<Person> allPersons;

    private final DefaultListModel<Person> personModel = new DefaultListModel<>();
    private DefaultListModel<Person> allPersonModel;

    private Repository repository;

    private Person selectedPerson;

    /**
     * Creates new form AddActor
     */
    public AddActor(String personsString, EditMoviePanel panel, boolean isActor) {
        try {
            persons = splitAndFillCurentPersons(personsString);
            panelEdit = panel;
            actorsChanged = isActor;
            initComponents();
            init();
        } catch (Exception ex) {
            Logger.getLogger(AddActor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsPersonsCurrent = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsPersonsAll = new javax.swing.JList<>();
        btnAddPerson = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnUpdatePerson = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        jScrollPane1.setViewportView(lsPersonsCurrent);

        jLabel1.setText("Person");

        jLabel2.setText("All persons");

        jScrollPane2.setViewportView(lsPersonsAll);

        btnAddPerson.setText("Add person");
        btnAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPersonActionPerformed(evt);
            }
        });

        btnDeletePerson.setText("Delete person");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnUpdatePerson.setText("Update person");
        btnUpdatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePersonActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeletePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddPerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeletePerson)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdatePerson)
                            .addComponent(btnSave)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPersonActionPerformed
        new AddPersonDialog(this, false).setVisible(true);
    }//GEN-LAST:event_btnAddPersonActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        try {
            selectedPerson = lsPersonsAll.getSelectedValue();
            repository.deletePerson(selectedPerson.getId());
            loadAllAuthorsModel(allPersons);
        } catch (Exception ex) {
            Logger.getLogger(AddActor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnUpdatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePersonActionPerformed
        selectedPerson = lsPersonsAll.getSelectedValue();
        new UpdatePersonDialog(this, false, selectedPerson).setVisible(true);
    }//GEN-LAST:event_btnUpdatePersonActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String tfValue = returningString(persons);
            panelEdit.AddString(tfValue, actorsChanged);
            dispose();
        } catch (Exception ex) {
            Logger.getLogger(AddActor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPerson;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdatePerson;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Person> lsPersonsAll;
    private javax.swing.JList<Person> lsPersonsCurrent;
    // End of variables declaration//GEN-END:variables

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
        allPersonModel = new DefaultListModel<>();
    }

    private void init() throws Exception {
        initRepository();
        loadAuthorsModel();
        loadAllAuthorsModel(allPersons);
        initDragAndDrop();
    }

    private void loadAllAuthorsModel(List<Person> allPeople) throws Exception {
        allPeople = repository.selectPersons();
        allPersonModel.clear();
        allPeople.forEach(allPersonModel::addElement);
        lsPersonsAll.setModel(allPersonModel);
    }

    private void loadAuthorsModel() throws Exception {
        personModel.clear();
        persons.forEach(personModel::addElement);
        lsPersonsCurrent.setModel(personModel);
    }

    private void initDragAndDrop() {
        lsPersonsAll.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsPersonsAll.setDragEnabled(true);
        lsPersonsAll.setTransferHandler(new ExportHandler());

        lsPersonsCurrent.setDropMode(DropMode.ON);
        lsPersonsCurrent.setTransferHandler(new ImportHandler());
    }

    @Override
    public boolean AddPerson(Person person) throws Exception {
        allPersons = repository.selectPersons();
        if (allPersons.add(person)) {
            loadAllAuthorsModel(allPersons);
            return true;
        }
        return false;
    }

    private static Person getPerson(String data) {
        String[] personInfo = data.trim().split(" ", 2);
        switch (personInfo.length) {
            case 1:
                return new Person(personInfo[0], "");
            case 2:
                return new Person(personInfo[0], personInfo[1]);
        }
        throw new IllegalArgumentException("Data could not be handled");
    }

    private List<Person> splitAndFillCurentPersons(String personsString) throws Exception {
        List<Person> people = new ArrayList<>();
        if (personsString.isEmpty()) {
            return people;
        } else {
            String[] peopleInfo = personsString.split(DELIMITER);
            for (String personInfo : peopleInfo) {
                people.add(getPerson(personInfo));
            }
        }
        return people;
    }

    private String returningString(List<Person> persons) {
        StringBuilder returningString = new StringBuilder();
        for (int i = 0; i < persons.size(); i++) {
            if (persons.size() - 1 == i) {
                returningString.append(persons.get(i).toString().trim()); //.toString().trim());
            } else {
                returningString.append(persons.get(i).toString().trim());
                returningString.append(DELIMITER);
                returningString.append(SPACE);
            }

        }
        String string = returningString.toString();
        return string;
    }

    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY; //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsPersonsAll.getSelectedValue()); //To change body of generated methods, choose Tools | Templates.
        }
    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
            // tu gore može i slika ic imageflavor//To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            try {
                Person data = (Person) support.getTransferable().getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (persons.add(data)) {
                    loadAuthorsModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(AddActor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(AddActor.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false; //To change body of generated methods, choose Tools | Templates.
        }
    }

}
